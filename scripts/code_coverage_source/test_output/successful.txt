[doctest] run with "--help" for options
== TEST CASE ==================================================================
test.cpp(0)
subcases

== TEST CASE ==================================================================
test.cpp(0)
subcases
  2

test.cpp(0) ERROR!
  CHECK( 0 )
with expansion:
  CHECK( 0 )

== TEST CASE ==================================================================
test.cpp(0)
expressions should be evaluated only once

test.cpp(0) PASSED!
  REQUIRE( ++a == 6 )
with expansion:
  REQUIRE( 6 == 6 )

test.cpp(0) PASSED!
  REQUIRE_EQ( ++a, 7 )
with expansion:
  REQUIRE_EQ( 7, 7 )

== TEST CASE ==================================================================
test.cpp(0)
assertions

test.cpp(0) PASSED!
  CHECK( true )
with expansion:
  CHECK( true )

test.cpp(0) ERROR!
  CHECK( 1 == 0 )
with expansion:
  CHECK( 1 == 0 )

test.cpp(0) ERROR!
  CHECK_FALSE( 1 )
with expansion:
  CHECK_FALSE( 1 )

test.cpp(0) ERROR!
  CHECK( a == b )
with expansion:
  CHECK( myType! == myType! )

test.cpp(0) ERROR!
  CHECK( Approx(0.1) == 0.2 )
with expansion:
  CHECK( Approx( 0.1 ) == 0.2 )

test.cpp(0) PASSED!
  CHECK_THROWS( throws(true) )

test.cpp(0) ERROR!
  CHECK_THROWS( throws(false) )
didn't throw at all

test.cpp(0) PASSED!
  CHECK_NOTHROW( throws(false) )

test.cpp(0) ERROR!
  CHECK_NOTHROW( throws(true) )
threw exception:
  unknown exception

test.cpp(0) PASSED!
  CHECK_THROWS_AS( throws(true), bool )

test.cpp(0) FATAL ERROR!
  REQUIRE_THROWS_AS( throws(false), bool )
didn't throw at all

== TEST CASE ==================================================================
test.cpp(0)
assertions - all of them

test.cpp(0) PASSED!
  WARN( true )
with expansion:
  WARN( true )

test.cpp(0) PASSED!
  CHECK( true )
with expansion:
  CHECK( true )

test.cpp(0) PASSED!
  REQUIRE( true )
with expansion:
  REQUIRE( true )

test.cpp(0) PASSED!
  WARN_FALSE( false )
with expansion:
  WARN_FALSE( false )

test.cpp(0) PASSED!
  CHECK_FALSE( false )
with expansion:
  CHECK_FALSE( false )

test.cpp(0) PASSED!
  REQUIRE_FALSE( false )
with expansion:
  REQUIRE_FALSE( false )

test.cpp(0) PASSED!
  WARN_THROWS( throws(true) )

test.cpp(0) PASSED!
  CHECK_THROWS( throws(true) )

test.cpp(0) PASSED!
  REQUIRE_THROWS( throws(true) )

test.cpp(0) PASSED!
  WARN_THROWS_AS( throws(true), bool )

test.cpp(0) PASSED!
  CHECK_THROWS_AS( throws(true), bool )

test.cpp(0) PASSED!
  REQUIRE_THROWS_AS( throws(true), bool )

test.cpp(0) PASSED!
  WARN_NOTHROW( throws(false) )

test.cpp(0) PASSED!
  CHECK_NOTHROW( throws(false) )

test.cpp(0) PASSED!
  REQUIRE_NOTHROW( throws(false) )

test.cpp(0) PASSED!
  WARN_EQ( 1, 1 )
with expansion:
  WARN_EQ( 1, 1 )

test.cpp(0) PASSED!
  CHECK_EQ( 1, 1 )
with expansion:
  CHECK_EQ( 1, 1 )

test.cpp(0) PASSED!
  REQUIRE_EQ( 1, 1 )
with expansion:
  REQUIRE_EQ( 1, 1 )

test.cpp(0) PASSED!
  WARN_NE( 1, 0 )
with expansion:
  WARN_NE( 1, 0 )

test.cpp(0) PASSED!
  CHECK_NE( 1, 0 )
with expansion:
  CHECK_NE( 1, 0 )

test.cpp(0) PASSED!
  REQUIRE_NE( 1, 0 )
with expansion:
  REQUIRE_NE( 1, 0 )

test.cpp(0) PASSED!
  WARN_GT( 1, 0 )
with expansion:
  WARN_GT( 1, 0 )

test.cpp(0) PASSED!
  CHECK_GT( 1, 0 )
with expansion:
  CHECK_GT( 1, 0 )

test.cpp(0) PASSED!
  REQUIRE_GT( 1, 0 )
with expansion:
  REQUIRE_GT( 1, 0 )

test.cpp(0) PASSED!
  WARN_LT( 0, 1 )
with expansion:
  WARN_LT( 0, 1 )

test.cpp(0) PASSED!
  CHECK_LT( 0, 1 )
with expansion:
  CHECK_LT( 0, 1 )

test.cpp(0) PASSED!
  REQUIRE_LT( 0, 1 )
with expansion:
  REQUIRE_LT( 0, 1 )

test.cpp(0) PASSED!
  WARN_GE( 1, 1 )
with expansion:
  WARN_GE( 1, 1 )

test.cpp(0) PASSED!
  CHECK_GE( 1, 1 )
with expansion:
  CHECK_GE( 1, 1 )

test.cpp(0) PASSED!
  REQUIRE_GE( 1, 1 )
with expansion:
  REQUIRE_GE( 1, 1 )

test.cpp(0) PASSED!
  WARN_LE( 1, 1 )
with expansion:
  WARN_LE( 1, 1 )

test.cpp(0) PASSED!
  CHECK_LE( 1, 1 )
with expansion:
  CHECK_LE( 1, 1 )

test.cpp(0) PASSED!
  REQUIRE_LE( 1, 1 )
with expansion:
  REQUIRE_LE( 1, 1 )

test.cpp(0) PASSED!
  WARN_UNARY( 1 )
with expansion:
  WARN_UNARY( 1 )

test.cpp(0) PASSED!
  CHECK_UNARY( 1 )
with expansion:
  CHECK_UNARY( 1 )

test.cpp(0) PASSED!
  REQUIRE_UNARY( 1 )
with expansion:
  REQUIRE_UNARY( 1 )

test.cpp(0) PASSED!
  WARN_UNARY_FALSE( 0 )
with expansion:
  WARN_UNARY_FALSE( 0 )

test.cpp(0) PASSED!
  CHECK_UNARY_FALSE( 0 )
with expansion:
  CHECK_UNARY_FALSE( 0 )

test.cpp(0) PASSED!
  REQUIRE_UNARY_FALSE( 0 )
with expansion:
  REQUIRE_UNARY_FALSE( 0 )

test.cpp(0) PASSED!
  FAST_WARN_EQ( 1, 1 )
with expansion:
  FAST_WARN_EQ( 1, 1 )

test.cpp(0) PASSED!
  FAST_CHECK_EQ( 1, 1 )
with expansion:
  FAST_CHECK_EQ( 1, 1 )

test.cpp(0) PASSED!
  FAST_REQUIRE_EQ( 1, 1 )
with expansion:
  FAST_REQUIRE_EQ( 1, 1 )

test.cpp(0) PASSED!
  FAST_WARN_NE( 1, 0 )
with expansion:
  FAST_WARN_NE( 1, 0 )

test.cpp(0) PASSED!
  FAST_CHECK_NE( 1, 0 )
with expansion:
  FAST_CHECK_NE( 1, 0 )

test.cpp(0) PASSED!
  FAST_REQUIRE_NE( 1, 0 )
with expansion:
  FAST_REQUIRE_NE( 1, 0 )

test.cpp(0) PASSED!
  FAST_WARN_GT( 1, 0 )
with expansion:
  FAST_WARN_GT( 1, 0 )

test.cpp(0) PASSED!
  FAST_CHECK_GT( 1, 0 )
with expansion:
  FAST_CHECK_GT( 1, 0 )

test.cpp(0) PASSED!
  FAST_REQUIRE_GT( 1, 0 )
with expansion:
  FAST_REQUIRE_GT( 1, 0 )

test.cpp(0) PASSED!
  FAST_WARN_LT( 0, 1 )
with expansion:
  FAST_WARN_LT( 0, 1 )

test.cpp(0) PASSED!
  FAST_CHECK_LT( 0, 1 )
with expansion:
  FAST_CHECK_LT( 0, 1 )

test.cpp(0) PASSED!
  FAST_REQUIRE_LT( 0, 1 )
with expansion:
  FAST_REQUIRE_LT( 0, 1 )

test.cpp(0) PASSED!
  FAST_WARN_GE( 1, 1 )
with expansion:
  FAST_WARN_GE( 1, 1 )

test.cpp(0) PASSED!
  FAST_CHECK_GE( 1, 1 )
with expansion:
  FAST_CHECK_GE( 1, 1 )

test.cpp(0) PASSED!
  FAST_REQUIRE_GE( 1, 1 )
with expansion:
  FAST_REQUIRE_GE( 1, 1 )

test.cpp(0) PASSED!
  FAST_WARN_LE( 1, 1 )
with expansion:
  FAST_WARN_LE( 1, 1 )

test.cpp(0) PASSED!
  FAST_CHECK_LE( 1, 1 )
with expansion:
  FAST_CHECK_LE( 1, 1 )

test.cpp(0) PASSED!
  FAST_REQUIRE_LE( 1, 1 )
with expansion:
  FAST_REQUIRE_LE( 1, 1 )

test.cpp(0) PASSED!
  FAST_WARN_UNARY( 1 )
with expansion:
  FAST_WARN_UNARY( 1 )

test.cpp(0) PASSED!
  FAST_CHECK_UNARY( 1 )
with expansion:
  FAST_CHECK_UNARY( 1 )

test.cpp(0) PASSED!
  FAST_REQUIRE_UNARY( 1 )
with expansion:
  FAST_REQUIRE_UNARY( 1 )

test.cpp(0) PASSED!
  FAST_WARN_UNARY_FALSE( 0 )
with expansion:
  FAST_WARN_UNARY_FALSE( 0 )

test.cpp(0) PASSED!
  FAST_CHECK_UNARY_FALSE( 0 )
with expansion:
  FAST_CHECK_UNARY_FALSE( 0 )

test.cpp(0) FATAL ERROR!
  FAST_REQUIRE_UNARY_FALSE( 1 )
with expansion:
  FAST_REQUIRE_UNARY_FALSE( 1 )

== TEST CASE ==================================================================
test.cpp(0)
throws

TEST CASE FAILED!
threw exception:
  unknown exception

===============================================================================
[doctest] test cases:    5 |    1 passed |    4 failed |    2 skipped
[doctest] assertions:   56 |   47 passed |    9 failed |
